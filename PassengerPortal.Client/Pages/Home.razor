@*@page "/"
@using PassengerPortal.Shared.Models
@inject HttpClient Http
<PageTitle>Home</PageTitle>

<h1>Witaj na stronie głównej</h1>
<h3>Opóźnienia pociągów</h3>

<EditForm Model="NewDelay" OnValidSubmit="AddDelay">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Numer pociągu:</label>
        <InputText @bind-Value="NewDelay.TrainNumber" />
    </div>
    <div>
        <label>Relacja:</label>
        <InputText @bind-Value="NewDelay.Route" />
    </div>
    <div>
        <label>Godzina odjazdu:</label>
        <input type="datetime-local" @bind="NewDelay.DepartureTime" />
    </div>
    <div>
        <label>Opóźnienie (min):</label>
        <InputNumber @bind-Value="NewDelay.DelayInMinutes" />
    </div>
    <button type="submit">Dodaj</button>
</EditForm>

<table>
    <thead>
    <tr>
        <th>Numer pociągu</th>
        <th>Relacja</th>
        <th>Godzina odjazdu</th>
        <th>  Opóźnienie</th>
        <th>Akcje</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var delay in Delays)
    {
        <tr>
            <td>@delay.TrainNumber</td>
            <td>@delay.Route</td>
            <td>@delay.DepartureTime</td>
            <td>@delay.DelayInMinutes</td>
            <td><button @onclick="() => DeleteDelay(delay.Id)">Usuń</button></td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<Delay> Delays = new();
    private Delay NewDelay = new();

    protected override async Task OnInitializedAsync()
    {
        //Delays = await Http.GetFromJsonAsync<List<Delay>>("api/Delays");
        try
        {
            Delays = await Http.GetFromJsonAsync<List<Delay>>("api/Delays");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania opóźnień: {ex.Message}");
        }
    }

    private async Task AddDelay()
    {
        var response = await Http.PostAsJsonAsync("api/Delays", NewDelay);
        // Wymuszenie czasu UTC
        NewDelay.DepartureTime = DateTime.SpecifyKind(NewDelay.DepartureTime, DateTimeKind.Utc);

        if (response.IsSuccessStatusCode)
        {
            var createdDelay = await response.Content.ReadFromJsonAsync<Delay>();
            Delays.Add(createdDelay);
            NewDelay = new Delay(); // Clear form
        }
    }

    private async Task DeleteDelay(int id)
    {
        var response = await Http.DeleteAsync($"api/Delays/{id}");
        if (response.IsSuccessStatusCode)
        {
            Delays.RemoveAll(d => d.Id == id);
        }
    }
    
}*@
@page "/"
@using PassengerPortal.Shared.Models
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<div class="main-container">
    <div class="delay-card">
        <h2>Opóźnienia</h2>
        <p><a href="/add-delay">Kliknij, aby dodać nowe opóźnienia</a></p>

        <h3>Aktualne opóźnienia pociągów</h3>
        <table>
            <thead>
            <tr>
                <th>Numer pociągu</th>
                <th>Relacja</th>
                <th>Godzina odjazdu</th>
                <th>Opóźnienie (min)</th>
                <th>Akcje</th>
            </tr>
            </thead>
            <tbody>
            @if (Delays.Any())
            {
            foreach (var delay in Delays)
            {
            <tr>
                <td>@delay.TrainNumber</td>
                <td>@delay.Route</td>
                <td>@delay.DepartureTime</td>
                <td>@delay.DelayInMinutes</td>

            </tr>
            }
            }
            </tbody>
        </table>
    </div>
    <div class="right-section">
        <div class="about-card">
            <h2>O aplikacji</h2>
            <p>Witaj na Passenger Portal – kompanie twojej podróży i wiarygodnym narzędziu do planowania podróży pociągiem, serduszkowania twoich ulubionych lokomotyw,
                i pozostawania na bieżąco z każdym opóźnieniem!</p>
        </div>
        <p></p>
        <div class="image-card">
            <img src="/images/trains/vectron.jpg" alt="Train Image" class="rounded-image" />
        </div>
    </div>
</div>

@code {
private List<Delay> Delays = new();

protected override async Task OnInitializedAsync()
{
try
{
Delays = await Http.GetFromJsonAsync<List<Delay>>("api/Delays");
}
catch (Exception ex)
{
Console.WriteLine($"Error fetching delays: {ex.Message}");
}
}
}
